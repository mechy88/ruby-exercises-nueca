RUBY KODIGO

# comments start with a hashtag

# how to output to terminal
puts <output>

6.even? #=> true
7.even? #=> false

6.odd? #=> false
7.odd? #=> true

# To convert an integer to a float:
13.to_f   #=> 13.0

# To convert a float to an integer:
13.0.to_i #=> 13
13.9.to_i #=> 13

# Accessing substrings
"hello"[0]      #=> "h"
"hello"[0..1]   #=> "he"
"hello"[0, 4]   #=> "hell"
"hello"[-1]     #=> "o"

# Dynamic strings like in javascript
puts "Hello, #{name}" #=> "Hello, Odin"

# Converting objects to string is used with .to_s
5.to_s        #=> "5"
nil.to_s      #=> ""
:symbol.to_s  #=> "symbol"

#map, apply something to all elements
[1, 2, 3, 4, 5].map { |i| i * 3 }

# sample loop syntax
def array_copy(source)
  destination = []
  # your code
  for i in source
    if i < 4
      destination.push(i)
    end
  end
  return destination
end

# for each loop
def array_copy(source)
  destination = []
  # your code
  source.each do |i|
    if i < 4
      destination.push(i)
    end
  end
  return destination
end


# hash syntax
# restaurant_menu = { "Ramen" => 3, "Dal Makhani" => 4, "Coffee" => 2 }
restaurant_menu.each do | item, price |
  puts "#{item}: $#{price}"
end

# hash syntax
restaurant_menu = {
  "Ramen" => 3,
    "Dal Makhani" => 4,
  "Tea" => 2
  }

#fetch values from hash
restaurant_menu["Ramen"]

# class syntax
# class Rectangle
class Rectangle
  def initialize(length, breadth)
    @length = length
    @breadth = breadth
  end

  def perimeter
    2 * (@length + @breadth)
  end

  def area
    @length * @breadth
  end
end

# method syntax
def add_two(a)
  return a + 2
end

# method with options
def add(a_number, another_number, options = {})
  sum = a_number + another_number
  sum = sum.abs if options[:absolute]
  sum = sum.round(options[:precision]) if options[:round]
  sum
end

puts add(1.0134, -5.568)
puts add(1.0134, -5.568, absolute: true)
puts add(1.0134, -5.568, absolute: true, round: true, precision: 2)

# Gets is the standard input
puts "Enter a value :"
val = gets
puts val

# putc outputs one character at a time
str = "Hello Ruby!"
putc str

# using for loop with the range
for a in 1..5 do
    
 puts i
 
end

# while loop syntax
while conditional do
 # code to be executed
end

# block syntax
addition = lambda {|a, b| return a + b }
puts addition.call(5, 6)

def calculation(a, b, &block) # &block is an explicit (named) parameter
 block.call(a, b)
end

puts calculation(5, 5) { |a, b| a + b } # this is an implicit block
                                        # -- it is nameless and is not 
                                        # passed as an explicit parameter.


                                        

def calculation(a, b)
  yield(a, b) # yield calls an implicit (unnamed) block 
end

addition = lambda {|x, y| x + y}
puts calculation(5, 5, &addition) # like our last example, &addition is 
                                  # an explicit (named) block 
                                  # -- but `yield` can still call it!

# Shotened notation for lambda
short = ->(a, b) { a + b }
puts short.call(2, 3)

long = lambda { |a, b| a + b }
puts long.call(2, 3)

puts "A String".is_a?(String) # true
puts 1.is_a?(String)          # false


# returns the object's class
object.class

def know_it_all(object)
  object.class
end

Float.ancestors # gets all ancestors / parents of float

# simple getter method syntax
class Item
  attr_reader :item_name  

  def initialize(item_name)
    @item_name = item_name
  end  
end

item = Item.new("agragarok")
p item.item_name


# simple setter method syntax
class Item
  attr_writer :description
  attr_writer :color
  
  def initialize(description, color)
    @description = description
    @color = color
  end
end

# attr_accessor for both getting and setting



# similar to static methods in java, these are class methods
class Item
  def self.show
    puts "Class method show invoked"
  end  
end

Item.show

# object equality
class Item
  attr_reader :item_name, :quantity, :supplier_name, :price
  def initialize(item_name, quantity, supplier_name, price)
    @item_name = item_name
    @quantity = quantity
    @supplier_name = supplier_name
    @price = price
  end
  
  # implement ==, eql? and hash
  def ==(other_object)
    return (
      @item_name == other_object.item_name && 
      @quantity == other_object.quantity &&
      @supplier_name == other_object.supplier_name &&
      @price == other_object.price
      )
  end
  
  def eql?(other_object)
    return (self == other_object) 
  end
  
  def hash
    return self.item_name.hash ^ self.quantity.hash ^ self.supplier_name.hash ^ self.price.hash
  end
end

# printing
class Item
  def inspect
    "Result of inspect"
  end
end

puts Item.new
puts Item.new.to_s
p Item.new

def occurrences(str)
  # scans the string for words, breaks them apart to an array enumerable
	str.scan(/\w+/).inject(Hash.new(0)) do |build, word| 
      # converts the current word in lowercase, and adds to the map, increments that element's value
  	build[word.downcase] +=1
      # returns build? AHH it's mapping
      build # since this is the last value, it returns this if this is the last iteration
	end
end


#  Each with index
top_10 = ["Walmart", "Exxon Mobil", "Apple", "Berkshire Hathaway", "Amazon.com", "UnitedHealth Group", "McKesson", "CVS Health", "AT&T", "AmerisourceBergen"]
  top_10.each_with_index do | company, index |
    puts "#{index}. #{company}"
  end

# how to define a singleton method / function. Only the metaclass of instance Foo in foo will contain the shout method
class Foo
end

foo=Foo.new
def foo.shout
  puts "Foo Foo Foo!"
end
foo.shout
  
p Foo.new.respond_to?(:shout)

# use the .clone to copy an object
object.clone

#use the .freeze method to avoid any changes to the object
obect.freeze

# checks wheather a block is passed to the method
block_given?

# benchmarking code on ruby
begin_time = Time.now
sleep 0.3
end_time = Time.now
puts "Time taken is #{end_time - begin_time}."

# benchmarking using the benchmarking library
require 'benchmark'

puts Benchmark.measure { 602214.times { 3.14159 * 6.626068 } }


# benchmarking multiple blocks against each other, summarizes a report
require 'benchmark'

n=4000
Benchmark.bm do |benchmark|
  benchmark.report do
    a=[]; n.times { a = a + [n] }
  end
  benchmark.report do
    a=[]; n.times { a << n }
  end
  benchmark.report do
    a=[1..n].map {|number| number}
  end
end

# SAMPLE REPORT
  #      user     system      total        real
  #  0.008781   0.013060   0.021841 (  0.022032)
  #  0.000182   0.000053   0.000235 (  0.000235)
  #  0.000004   0.000001   0.000005 (  0.000005)

  # programatically define function
  class Doctor
  ["rhinoplasty", "checkup", "interpretive_dance"].each do |action|
	  define_method("perform_#{action}") do |argument|
			"performing #{action.gsub('_', ' ')} on #{argument}"
  	end
  end
end

# how to use some lifecycle events/calls. These fire whenever different kinds of methods are created
doctor = Doctor.new
puts doctor.perform_rhinoplasty("nose")
puts doctor.perform_checkup("throat")
puts doctor.perform_interpretive_dance("in da club")

def AN_OBJECT.methods_added
  unless AN_OBJECT.is_a?(Class)
    @@methods_added ||= []
  end
end

def AN_OBJECT.singleton_methods_added
  if AN_OBJECT.instance_of?(Object)
    @@singleton_methods_added ||= []
  end
end
